<?xml version="1.0" encoding="UTF-8" ?>
<configuration>

    <!-- 定义日志文件的存储地址和前缀名,简单说就是定义变量，后面可以使用${xx}来使用变量 -->
    <property name="LOG_HOME" value="/tmp/log"/>
    <property name="LOG_INFO_FILE_NAME" value="myboot-info"/>
    <property name="LOG_INFO_MYSQL_FILE_NAME" value="mysql-info"/>
    <property name="LOG_ERROR_FILE_NAME" value="myboot-error"/>

    <!-- appender是configuration的子节点，是负责写日志的组件 -->
    <!-- ConsoleAppender：把日志输出到控制台 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 默认情况下，每个日志事件都会立即刷新到基础输出流。这种默认方法更安全，因为如果应用程序在没有正确关闭appender的情况下退出，则日志事件不会丢失 -->
        <!-- 但为了显着增加日志记录吞吐量，可以将immediateFlush属性设置为false -->
        <immediateFlush>true</immediateFlush>
        <encoder>
            <!-- %37():如果字符没有37个字符长度,则左侧用空格补齐 -->
            <!-- %-37():如果字符没有37个字符长度,则右侧用空格补齐 -->
            <!-- %15.15():如果记录的线程字符长度小于15(第一个)则用空格在左侧补齐,如果字符长度大于15(第二个),则从开头开始截断多余的字符 -->
            <!-- %-40.40():如果记录的logger字符长度小于40(第一个)则用空格在右侧补齐,如果字符长度大于40(第二个),则从开头开始截断多余的字符 -->
            <!-- %msg：日志打印详情 -->
            <!-- %n:换行符 -->
            <!-- %highlight():转换说明符以粗体红色显示其级别为ERROR的事件，红色为WARN，BLUE为INFO，以及其他级别的默认颜色 -->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) - [%10.10(%thread)] %cyan(%-40.40(%logger{40}):%line): %msg%n</pattern>
            <!-- 控制台也要使用UTF-8，不要使用GBK，否则会中文乱码 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- info日志   -->
    <!-- RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件,
        以下的大概意思是：
                1.先按日期存日志，日期变了，将前一天的日志文件名重命名为XXX%日期%索引，新的日志仍然是${LOG_INFO_FILE_NAME}.log
                2.如果日期没有发生变化，但是当前日志的文件大小超过10MB时，对当前日志进行分割 重命名
     -->
    <appender name="INFO_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--日志文件路径和名称-->
        <File>${LOG_HOME}/${LOG_INFO_FILE_NAME}.log</File>
        <!--是否追加到文件末尾,默认为true-->
        <append>true</append>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <!-- 如果命中ERROR就禁止这条日志 -->
            <onMatch>DENY</onMatch>
            <!-- 如果没有命中就使用这条规则 -->
            <onMismatch>ACCEPT</onMismatch>
        </filter>
        <!--有两个与RollingFileAppender交互的重要子组件:
                    RollingPolicy:    负责执行翻转所需的操作。
                    TriggeringPolicy: 将确定是否以及何时发生翻转。因此RollingPolicy负责什么和TriggeringPolicy负责什么时候
            RollingFileAppender必须同时设置RollingPolicy和TriggeringPolicy;但如果其RollingPolicy也实现了TriggeringPolicy接口，则只需要显式指定前者-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 日志文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 -->
            <!-- 文件名：${LOG_HOME}/${LOG_INFO_FILE_NAME}.2022-10-10.0.log -->
            <!-- 注意：SizeAndTimeBasedRollingPolicy中 ％i和％d令牌都是强制性的，必须存在要不会报错 -->
            <fileNamePattern>${LOG_HOME}/${LOG_INFO_FILE_NAME}.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 每产生一个日志文件，该日志文件的保存期限为15天, maxHistory的单位是根据fileNamePattern中的翻转策略自动推算出来的.
                例如上面选用了yyyy-MM-dd,则单位为天
                如果上面选用了yyyy-MM,则单位为月,另外上面的单位默认为yyyy-MM-dd-->
            <maxHistory>15</maxHistory>
            <!-- 每个日志文件到10mb的时候开始切分，最多保留15天，但最大到20GB，哪怕没到30天也要删除多余的日志 -->
            <totalSizeCap>20GB</totalSizeCap>
            <!-- maxFileSize:这是活动文件的大小，默认值是10MB，测试时可改成小看效果 -->
            <maxFileSize>10MB</maxFileSize>
        </rollingPolicy>
        <!--编码器-->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level - [%15.15(%thread)] %-40.40(%logger{40}:%line) : %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- error 日志-->
    <appender name="ERROR_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--日志文件路径和名称-->
        <File>${LOG_HOME}/${LOG_ERROR_FILE_NAME}.log</File>
        <!--是否追加到文件末尾,默认为true-->
        <append>true</append>
        <!-- ThresholdFilter过滤低于指定阈值的事件。对于等于或高于阈值的事件，ThresholdFilter将在调用其decision方法时响应NEUTRAL。但将拒绝级别低于阈值的事件 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <!-- 低于ERROR级别的日志（debug,info）将被拒绝，等于或者高于ERROR的级别将相应NEUTRAL -->
            <level>ERROR</level>
        </filter>
        <!--有两个与RollingFileAppender交互的重要子组件:
                    RollingPolicy:    负责执行翻转所需的操作。
                    TriggeringPolicy: 将确定是否以及何时发生翻转。因此RollingPolicy负责什么和TriggeringPolicy负责什么时候
            RollingFileAppender必须同时设置RollingPolicy和TriggeringPolicy;但如果其RollingPolicy也实现了TriggeringPolicy接口，则只需要显式指定前者-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 日志文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 -->
            <!-- 文件名：${LOG_HOME}/${LOG_INFO_FILE_NAME}.2022-10-10.0.log -->
            <!-- 注意：SizeAndTimeBasedRollingPolicy中 ％i和％d令牌都是强制性的，必须存在要不会报错 -->
            <fileNamePattern>${LOG_HOME}/${LOG_ERROR_FILE_NAME}.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 每产生一个日志文件，该日志文件的保存期限为15天, maxHistory的单位是根据fileNamePattern中的翻转策略自动推算出来的.
                例如上面选用了yyyy-MM-dd,则单位为天
                如果上面选用了yyyy-MM,则单位为月,另外上面的单位默认为yyyy-MM-dd-->
            <maxHistory>15</maxHistory>
            <!-- 每个日志文件到10mb的时候开始切分，最多保留15天，但最大到20GB，哪怕没到30天也要删除多余的日志 -->
            <totalSizeCap>20GB</totalSizeCap>
            <!-- maxFileSize:这是活动文件的大小，默认值是10MB，测试时可改成小看效果 -->
            <maxFileSize>10MB</maxFileSize>
        </rollingPolicy>
        <!--编码器-->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level - [%15.15(%thread)] %-40.40(%logger{40}:%line) : %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <appender name="MYSQL_INFO_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--日志文件路径和名称-->
        <File>${LOG_HOME}/${LOG_INFO_MYSQL_FILE_NAME}.log</File>
        <!--是否追加到文件末尾,默认为true-->
        <append>true</append>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <!-- 如果命中ERROR就禁止这条日志 -->
            <onMatch>DENY</onMatch>
            <!-- 如果没有命中就使用这条规则 -->
            <onMismatch>ACCEPT</onMismatch>
        </filter>
        <!--有两个与RollingFileAppender交互的重要子组件:
                    RollingPolicy:    负责执行翻转所需的操作。
                    TriggeringPolicy: 将确定是否以及何时发生翻转。因此RollingPolicy负责什么和TriggeringPolicy负责什么时候
            RollingFileAppender必须同时设置RollingPolicy和TriggeringPolicy;但如果其RollingPolicy也实现了TriggeringPolicy接口，则只需要显式指定前者-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 日志文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 -->
            <!-- 文件名：${LOG_HOME}/${LOG_INFO_FILE_NAME}.2022-10-10.0.log -->
            <!-- 注意：SizeAndTimeBasedRollingPolicy中 ％i和％d令牌都是强制性的，必须存在要不会报错 -->
            <fileNamePattern>${LOG_HOME}/${LOG_INFO_MYSQL_FILE_NAME}.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 每产生一个日志文件，该日志文件的保存期限为15天, maxHistory的单位是根据fileNamePattern中的翻转策略自动推算出来的.
                例如上面选用了yyyy-MM-dd,则单位为天
                如果上面选用了yyyy-MM,则单位为月,另外上面的单位默认为yyyy-MM-dd-->
            <maxHistory>15</maxHistory>
            <!-- 每个日志文件到10mb的时候开始切分，最多保留15天，但最大到20GB，哪怕没到30天也要删除多余的日志 -->
            <totalSizeCap>20GB</totalSizeCap>
            <!-- maxFileSize:这是活动文件的大小，默认值是10MB，测试时可改成小看效果 -->
            <maxFileSize>10MB</maxFileSize>
        </rollingPolicy>
        <!--编码器-->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level - [%15.15(%thread)] %-40.40(%logger{40}:%line) : %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!--  根记录器  -->
    <root level="INFO">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="INFO_LOG"/>
        <appender-ref ref="ERROR_LOG"/>
    </root>

    <!-- 指定项目中某个包，当有日志操作行为时的日志记录级别 -->
    <!-- 级别依次为【从高到低】：FATAL > ERROR > WARN > INFO > DEBUG > TRACE  -->
    <logger name="com.java" level="INFO">
        <appender-ref ref="INFO_LOG" />
        <appender-ref ref="ERROR_LOG" />
    </logger>

    <!-- 利用logback输入mybatis的sql日志，如果不加 additivity="false" 则此logger会将输出转发到自身以及祖先的logger中，就会出现日志文件中sql重复打印-->
    <logger name="com.eagle.maven.mapper" level="DEBUG" additivity="false">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="MYSQL_INFO_LOG" />
        <appender-ref ref="MYSQL_INFO_LOG" />
    </logger>

</configuration>
